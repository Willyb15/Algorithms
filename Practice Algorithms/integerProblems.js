// <!-- If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

// Find the sum of all the multiples of 3 or 5 below 1000.
var total = 0;
for(i=0; i <1000; i++){
    if(i%3 === 0 || i%5 === 0){
        total += i;
    }
}
console.log(total);

// ------------------------------------------------------

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
function fibSum(){
    var sum = 0;
    var fib = [1, 2];
    
    for (var i = 2; i < 35; i++) {
        fib[ i ] = fib[ i - 1 ] + fib[ i - 2 ];
           
        if(fib[i]%2===0 && fib[i]<4000000){
            sum = sum + fib[i];
        }    
        
    }
    console.log(fib);
    return sum;
}

console.log(fibSum());

// -----------------------------------------
// FizzBuzz
// Print out the numbers 1-100, if the number is divisible by 3, print "Fizz" istead of the number. If it's divisible by 5, print "Buzz" instead of the number. If it's divisibly by both, print "FizBuzz". -->
function fizzBuzz(){
    for (var i = 0; i<55; i++){
        if(i%3 === 0 && i%5 ===0){
            console.log('FizzBuzz');
        }else if(i%3 === 0){
            console.log("Fizz");
        }else if(i%5===0){
            console.log("Buzz");
        }else
            console.log(i);
    }
}

console.log(fizzBuzz());


// Tougher Challenge
// The prime factors of 13195 are 5, 7, 13 and 29.
// ANSWER - 6857
// What is the largest prime factor of the number 600851475143 ?

  function isPrime(number) {
       if(number < 2) return false;
       for (var i = 2; i < number; i++) {
           if(number%i===0)
            return false;
       }
      return true;
    }



    function primeFactors (number){
       for (var i=2; i<= number/i; i++){
           console.log("i=" + i + " number=" + number);
       
       while(number %i === 0){
           number = number/i;
            console.log("Factor= "+ i);
        }
        }
        if(number>1){
            console.log("Last Factor=" + number);
        }
    }  
    primeFactors(600851475143);


    
// ----------------------------------------
// Revisited Challenge
// Complete the doSearch function so that it implements a binary search, following the pseudo-code below (this pseudo-code was described in the previous article):
// 1. Let min = 0 and max = n-1.
// 2. If max < min, then stop: target is not present in array. Return -1.
// 3. Compute guess as the average of max and min, rounded down (so that it is an integer).
// 4. If array[guess] equals target, then stop. You found it! Return guess.
// 5. If the guess was too low, that is, array[guess] < target, then set min = guess + 1.
// 6. Otherwise, the guess was too high. Set max = guess - 1.
// 7. Go back to step 2.

// Once implemented, uncomment the Program.assertEqual() statement at the bottom to verify that the test assertion passes.

array =[1,2,3,4,5,6,7,8,9,10];
var search = function(array, targetValue){

    var min = 0;
    var max = array.length - 1;
    var guess;
    while(max>min){
        guess = Math.floor((max+min)/2);
       
        if(array[guess] === targetValue){
            console.log("you found it!");
            return guess;
        }else if(array[guess]<targetValue){ 
            min = guess + 1;
        }else{
            max = guess - 1;
        }
    }
    return -1;
};
search(array, 8);


// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450

// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product

// var number =
// "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";

// console.log(number);

// var digit = ('' + number).split('');
// var index1 = 0;
// var index2 = index1 + 3;
// var maxProd = 1;
// var curProd;

// while (index1 <= digit.length - 4){
//  curProd = 1;
//  for (var i in digit.slice(index1, index2+1)){
//      curProd *= digit[i];
//  }
//  if (curProd>maxProd){
//      maxProd = curProd;
//  }
//  index1 +=1;
//  index2 = index1+3;
// }

// console.log("answer:" + maxProd);
   var a = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';
    var b = a.split('');
    var pos1 = 0;
    var pos2 = pos1 + 4;
    var maxProd = 1;
    var curProd;
    
    while ( pos1 <= b.length - 5 ) {
        curProd = 1;
        for ( var i in b.slice(pos1, pos2+1) ) {
            curProd *= b[i];
        }
        
        if ( curProd > maxProd ) { maxProd = curProd; }
        
        pos1 += 1;
        pos2 = pos1 + 4;
    }
    
    console.log("answer: " + maxProd );



// You are given the following information, but you may prefer to do some research for yourself.

// 1 Jan 1900 was a Monday.
// Thirty days has September,
// April, June and November.
// All the rest have thirty-one,
// Saving February alone,
// Which has twenty-eight, rain or shine.
// And on leap years, twenty-nine.
// A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.

// How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?

var date = new Date();
var sum = 0;
// set full year sets is a method to use for dates
// get day is a method to find a particular day. Sunday = 0
// in the setfull year we pass parameters i - to iterate through through years 1901-2000, j - to iterate through each month in the year, and 1 - the day of the month(think first)
// These will iterate through years and months finding which type of day the first of the month was for given year - if the day == 0 (Sunday) then add 1 to the sum (sum++)
for(var i=1901; i<=2000; i++){
    for(var j=0; j<=11;j++){
        date.setFullYear(i,j,1);
        if(date.getDay() === 0){
            sum++;
        }
    }
}

console.log("answer:" + sum);


// Project Euler #31 Coins Problem
//  In England the currency is made up of pound, £, and pence, p, and there are eight coins in general circulation:
// 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p) and £2 (200p).
// You can make 2 pounds in the following way: 1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
// How many different ways can you make £2 using any number of coins?
// Answer: 73682
// this is the brute force "iterative" way 
var makeChange = function(total) {

  var coins = [1,2,5,10,20,50,100,200];
  var count = 0;

  for (var a = total; a >= 0; a -= coins[coins.length-1]) {
    for (var b = a; b >= 0; b -= coins[coins.length-2]) {
      for (var c = b; c >= 0; c -= coins[coins.length-3]) {
        for (var d = c; d >= 0; d -= coins[coins.length-4]) {
          for (var e = d; e >= 0; e -= coins[coins.length-5]) {
            for (var f = e; f >= 0; f -= coins[coins.length-6]) {
              for (var g = f; g >= 0; g -= coins[coins.length-7]) {
                count++;
              }
            }
          }
        }
      }
    }
  }
  return count;
};

// Solve recursively!!

makeChange(200);
var makeChange = function(total){
  var count = 0;
  var coins = [1, 2, 5, 10, 20, 50, 100, 200];

  var changer = function(index, value){

    var currentCoin = coins[index];

    if( index === 0){
      if( value % currentCoin === 0){
        count++;
      }
      return;
    }

    while( value >= 0 ){
      changer(index-1, value);
      value -= currentCoin;
    }
  };
  changer(coins.length-1, total);
  return count;
};

makeChange(200);

